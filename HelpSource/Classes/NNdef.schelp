TITLE:: NNdef
summary:: NNdef = Ndef + FRP
categories:: FP, FRP
related:: Classes/Ndef, Classes/FPSignal, Classes/EventSource, Classes/EventNetwork

DESCRIPTION::

NNdef is a child class of link::Classes/Ndef:: that attaches an FRP event network onto every Ndef source. The event network is recreated every time the Ndef source is changed. If the new event network has the same topology of the old one, then the state of the network is preserved: state values (e.g. from inject) and the current value of signals are kept and only the pure functions (e.g. from collect) are changed. The connection of the elements of the FRP event network to the audio UGens is done using the link::Classes/FPSignal#enKr:: and  link::Classes/EventSource#enKr:: (as well as enAr and enTr). These methods return a link::Classes/NamedControl:: which the frp element will automatically update.  Using code:: myfpsignal.enKr:: is therefore analogous to code::\freq.kr::.

CLASSMETHODS::

PRIVATE::buildFRPControlNum,buildCurrentNNdefKey,buildControls,eventNetworkBuilder,buildFRPControlIndex,nextControl, setsToPerform, new


INSTANCEMETHODS::


PRIVATE::eventNetworks, frpControls, clear, put, addToInternalKeys, asENInput, frpControlNames, frpNodeMap, frpStoreControls, initNNdef, internalKeys, internalKeysArray, asCode, frpNodeMapAsCode

method::enSet
Set value in FRP state dictionary (key value pairs in flat array). Value is sent to corresponing Store node.

method::enSetNoAction
Set value in FRP state dictionary (key value pairs in flat array). Value is not sent to corresponing Store node.

method::enGet
Get value from FRP state dictionary. Value is updated when FRP graph fires by corresponing Store method.

method::enUnset
Remove key-value pair from dictionary.

method::nodeMaps
Get audio and FRP node maps.


EXAMPLES::

These examples use the Kork NanoKontrol. If you don't have one available, a gui will be automatically created.

Let's start with normal NNdef without midi controls:
code::
(
NNdef(\x, {

	RLPF.ar( Pulse.ar(400), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup

}).play
)
::

We will now control the amplitude with the first slider of the first page of the nanokontrol. First we get the MKtlElement for the slider with code::k[\sl][page][column]::. Then we create an frp signal element with enInSig. A signal contains a current value. In this case it is better to use a signal as then there will a be start value which is the current value of the slider. Finally we connect the FPSignal to a NamedControl using code::.enKr::.

First create the Modality object representing a real or virtual Korg Nanokontrol:

code::
MKtl('nnkn0', "korg-nanokontrol").gui
::

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var column = 0;
	var amp = k[\sl][page][column].enInSig.enKr(lag: 0.1);

	RLPF.ar( Pulse.ar(400), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::


We can also control the frequency of the oscilator with a second slider. In this case we will specify a spec to be applied to the values.

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var amp = k[\sl][page][0].enInSig.enKr(lag: 0.1);
	var freq = k[\sl][page][1].enInSig.enKrUni(lag: 0.1, spec: [80,5000,\exp, 80].asSpec);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::

We can post values for debugging by supplying a label to link::Classes/FPSignal#enDebug:: :

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var amp = k[\sl][page][0].enInSig.enDebug("amp").enKr(lag: 0.1);
	var freq = k[\sl][page][1].enInSig.enDebug("freq").enKrUni(lag: 0.1, spec: [80,5000,\exp, 80].asSpec);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::

It's also possible to explicitly set the name of the controls. This is useful for storing presets with link::Classes/NdefMixer::.

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var amp = k[\sl][page][0].enInSig.enKr(lag: 0.1, key:\amp, debug:true);
	var freq = k[\sl][page][1].enInSig.enKrUni(lag: 0.1, key:\freq, spec: [80,5000,\exp, 80].asSpec, debug:true);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
//check in NdefMixer
NdefMixer(s)
::

Using the buttons as a sequencer.Although every time the nndef is re-evaluated the FRP network is recreated, if the network has has the same shape (for instance you only made changes in the function passed to link::Classes/EventSource#collect::) then the state from the previous version of the networked is copied over to the new network, in particular the values stored in the inject and signal nodes are copied. That means that after re-evaluating the NNdef below the last button pressed and its frequency value is remembered.

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var amp = k[\sl][page][0].enInSig.enKr(lag: 0.1, key: \amp, debug:true);
	var freq = k[\bt][page].flat.collect{ |mktlElement,i|
		var freq0 = 440 * (2**(i/12));
		//here enIn is used as we want an EventSource so that we can then
		//merge them all.
		mktlElement.enIn.collect{ freq0 }
	}
	.mreduce // merge all the event sources
	.enDebug("freq")
	.hold(440)
	.enKr(lag: 0.1);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::

Percussive version using link::Classes/EventSource#enTr:: which creates a link::Classes/TrigControl:::

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var amp = k[\sl][page][0].enInSig.enKr(lag: 0.1, key: \amp, debug:true);
	var buttons = k[\bt][page].flat;
	var freqES = buttons.collect{ |mktlElement,i|
		var freq0 = 440 * (2**(i/12));
		mktlElement.enIn.collect{ freq0 }
	}.mreduce;
	var freq = freqES.enKr(lag: 0.1, key: \freq, debug:true, spec:nil);

	var env = EnvGen.kr( Env.perc, freqES.enTr );

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp * env

}).play
)
::


Adding sliders for the LFNoise1 range. enKrUni is used as the value should be automatically mapped from [0,1] to the range in spec.

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;

	var page = 0;
	var amp = k[\sl][page][0].enInSig.enDebug("amp").enKr(lag: 0.1);
	var freq = k[\bt][page].flat.collect{ |mktlElement,i|
		var freq0 = 440 * (2**(i/12));
		mktlElement.enIn.collect{ freq0 }
	}
	.mreduce
	.enDebug("freq")
	.hold(440)
	.enKr(lag: 0.1, key: freq);
	var lo = k[\sl][page][1].enInSig.enDebug("lo").enKrUni(lag: 0.1, spec: \freq);
	var hi = k[\sl][page][2].enInSig.enDebug("hi").enKrUni(lag: 0.1, spec: \freq);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(lo,hi), 0.1 ) * 0.1.dup * amp

}).play
)
::

if play button is pressed we use higher octave. code:: { |octave, e| octave*freq0 } <%> octaveSig <@> mktlElement.enInES;:: works such that it only fires an event when code::mktlElement.enInES:: changes.

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;
	var page = 0;

	var octaveSig = k[\tr][\play].enInSig.collect(_+1)
	.enDebug("octaveSig");

	var amp = k[\sl][page][0].enInSig.enDebug("amp").enKr(lag: 0.1, key:\amp);

	var f0 = 100;
	var freq = k[\bt][page].flat.collect{ |mktlElement,i|
		var freq0 = f0 * (2**(i/12));
		{ |octave, e| octave*freq0 } <%> octaveSig <@> mktlElement.enIn;
	}
	.mreduce //merge all event sources
	.enDebug("freq")
	.hold(f0) //start with f0=100Hz
	.enKr(lag: 0.1, key:\freq);

	var lo = k[\sl][page][1].enInSig.enDebug("lo").enKrUni(lag: 0.1, spec: \freq, key:\filt_low);
	var hi = k[\sl][page][2].enInSig.enDebug("hi").enKrUni(lag: 0.1, spec: \freq, key:\filt_high);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(lo,hi), 0.1 ) * 0.1.dup * amp

}).play
)
::

Use arrow keys to switch octave:

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;
	var page = 0;

	var octaveUpES = k[\tr][\fwd].enIn.select(_==1).collect{ {|x| (x+1).min(3) } };
	var octaveDownES = k[\tr][\rew].enIn.select(_==1).collect{ {|x| (x-1).max(-3) } };

	var octaveSig = (octaveUpES | octaveDownES).injectFSig(0).enDebug("octave");

	var amp = k[\sl][page][0].enInSig.enDebug("amp").enKr(lag: 0.1, key:\amp);

	var f0 = 100;
	var freq = k[\bt][page].flat.collect{ |mktlElement,i|
		var freq0 = f0 * (2**(i/12));
		{ |octave, e| (2**octave)*freq0 } <%> octaveSig <@> mktlElement.enIn;
	}
	.mreduce //merge all event sources
	.enDebug("freq")
	.hold(f0) //start with f0=100Hz
	.enKr(lag: 0.1, key:\freq);

	var lo = k[\sl][page][1].enInSig.enDebug("lo").enKrUni(lag: 0.1, spec: \freq, key:\filt_low);
	var hi = k[\sl][page][2].enInSig.enDebug("hi").enKrUni(lag: 0.1, spec: \freq, key:\filt_high);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(lo,hi), 0.1 ) * 0.1.dup * amp

}).play
)
::

When the FRP graph is the same after re-evaluation and only the pure functions were changed the NNdef will be copy the state from the previous FRP graph to the new one. In this case the value in injectFSig will be copied and the current value of the octave will be kept. Try using the buttons until the octave is for instance 3, then run the code below and notice how pressing forward again will change the octave to 2:

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;
	var page = 0;

	var octaveUpES = k[\tr][\fwd].enIn.select(_==1).collect{ {|x| (x-1).min(3) } };
	var octaveDownES = k[\tr][\rew].enIn.select(_==1).collect{ {|x| (x+1).max(-3) } };

	var octaveSig = (octaveUpES | octaveDownES).injectFSig(0).enDebug("octave");

	var amp = k[\sl][page][0].enInSig.enDebug("amp").enKr(lag: 0.1, key:\amp);

	var f0 = 100;
	var freq = k[\bt][page].flat.collect{ |mktlElement,i|
		var freq0 = f0 * (2**(i/12));
		{ |octave, e| (2**octave)*freq0 } <%> octaveSig <@> mktlElement.enIn;
	}
	.mreduce //merge all event sources
	.enDebug("freq")
	.hold(f0) //start with f0=100Hz
	.enKr(lag: 0.1, key:\freq);

	var lo = k[\sl][page][1].enInSig.enDebug("lo").enKrUni(lag: 0.1, spec: \freq, key:\filt_low);
	var hi = k[\sl][page][2].enInSig.enDebug("hi").enKrUni(lag: 0.1, spec: \freq, key:\filt_high);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(lo,hi), 0.1 ) * 0.1.dup * amp

}).play
)
::

To dispose of the current value in all nodes with state use clear:

code::
NNdef(\x).clear
::

If play is pressed amp slider is in 'zoom' mode:

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elements;
	var page = 0;

	var freqSig; //for recursive use
	var freq, amp;

	//zoom and freqSig are mutually recursive defintions
	//cannot have mutually recursive variable definitions in SC
	//so we put freqSig inside a closure
	//and use the valueSampled method
	var zoom = { |a,b| a*b}.liftRecSampled({freqSig}, k[\tr][\play].enIn
	.select{|x| x == 1}
	.inject(0,{|x|1-x}) //make a toggle
	.enDebug("zoom") //see zoom state
	)
	.hold(0);

	var freqSliderES = k[\sl][page][1].enIn;

	freqSig = ({ |zoom, slider|
		if(zoom != 0) {
			slider.linlin(0.0,1.0,zoom-0.1,zoom+0.1)
		} {
			slider
		}
	} <%> zoom <@> freqSliderES)
	.hold(0.5)
	.enDebug("freq");

	freq = freqSig.enKrUni(lag: 0.1, spec: \freq.asSpec, key: \freq);

	amp = k[\sl][page][0].enIn.enDebug("amp").enKr(lag: 0.1, key: \amp);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::

Now with pick up when in zoom mode
code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elements;
	var page = 0;

	var freqSig; //for recursive use
	var freq, amp;

	var zoom = { |a,b| a*b}.liftRecSampled({freqSig}, k[\tr][\play].enIn
	.select{|x| x == 1}
	.inject(0,{|x|1-x}) //make a toggle
	.enDebug("zoom") //see zoom state
	)
	.hold(0);

	var freqSliderES = k[\sl][page][1].enIn;

	var x = { |zoom, slider|
		T(zoom, slider)
	} <%> zoom <@> freqSliderES;

	freqSig = x.injectSig(T(true,0,5), { |state, tup|
		var zoom = tup.at1;
		var slider = tup.at2;
		var valuePickedUp = state.at1;
		if(zoom != 0) {
			var newVal = slider.linlin(0.0,1.0,zoom-0.1,zoom+0.1);
			if (valuePickedUp) {
				T(true, newVal)
			} {
			if ( (newVal - zoom).abs.postln < 0.01) {
					T(true, newVal)
				} {
					T(false, zoom)
				}
			}
		} {
			T(false,slider)
		}
	})
	.enDebug("freqInject")
	.collect(_.at2)
	.enDebug("freq");

	freq = freqSig.enKrUni(lag: 0.1, spec: \freq.asSpec, key: \freq);

	amp = k[\sl][page][0].enIn.enDebug("amp").enKr(lag: 0.1, key: \amp);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::

Another way of doing the same using link::Classes/FPSignal#if:: :

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;
	var page = 0;

	var freqSig; //for recursive use
	var freq, amp;

	var freqSliderES = k[\sl][page][1].enIn;

	var zoomBoolES = k[\tr][\play].enIn
	.select{|x| x == 1}
	.collect(_.booleanValue)
	.inject(false,_.not)
	.enDebug("zoomBool");
	var zoomBoolSig = zoomBoolES.hold(false);

	var lastValueSig = { |freq, val| freq }.liftRecSampled({freqSig}, zoomBoolES.select(I.d)).hold(0.5).enDebug("lastValue");
	var zoomModeES = { |lastValue,slider| slider.linlin(0.0,1.0,lastValue-0.1,lastValue+0.1) } <%> lastValueSig <@> freqSliderES;

	freqSig = if(zoomBoolSig, zoomModeES, freqSliderES).hold(0.5)
	.enDebug("freq");

	freq = freqSig.enKrUni(lag: 0.1, spec: \freq.asSpec, key: \freq);

	amp = k[\sl][page][0].enIn.enDebug("amp").enKr(lag: 0.1);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(1000,4000), 0.1 ) * 0.1.dup * amp

}).play
)
::

subsection::Persistence

State can exist in the FRP network in the FPSignal nodes and inject, injectSig, injectF and injectFSig nodes. To save and recall this state use the store methods: injectStore, injectSigStore, injectFStore and injectFSigStore. These methods will associtate the node with a name and save incoming values to a dictionary in the NNdef. The dictionary can be queried with enGet and enSet. The whole NNdef can be persisted to disk using asCode.

code::
(
NNdef(\x, {
	var k = MKtl('nnkn0').elementGroup;
	var page = 0;

	var octaveUpES = k[\tr][\fwd].enIn.select(_==1).collect{ {|x| (x+1).min(3) } };
	var octaveDownES = k[\tr][\rew].enIn.select(_==1).collect{ {|x| (x-1).max(-3) } };

	var octaveSig = (octaveUpES | octaveDownES)
//HERE USING STORE VARIANT OF INJECTFSIG
	.injectFSigStore(0, \octave)
	.enDebug("octave");

	var amp = k[\sl][page][0].enInSig.enDebug("amp").enKr(lag: 0.1, key:\amp);

	var f0 = 100;
	var freq = k[\bt][page].flat.collect{ |mktlElement,i|
		var freq0 = f0 * (2**(i/12));
		{ |octave, e| (2**octave)*freq0 } <%> octaveSig <@> mktlElement.enIn;
	}
	.mreduce //merge all event sources
	.enDebug("freq")
	.hold(f0) //start with f0=100Hz
	.enKr(lag: 0.1, key:\freq);

	var lo = k[\sl][page][1].enInSig.enDebug("lo").enKrUni(lag: 0.1, spec: \freq, key:\filt_low);
	var hi = k[\sl][page][2].enInSig.enDebug("hi").enKrUni(lag: 0.1, spec: \freq, key:\filt_high);

	RLPF.ar( Pulse.ar(freq), LFNoise1.ar(1).range(lo,hi), 0.1 ) * 0.1.dup * amp

}).play
)

NNdef(\x).enGet(\octave)

NNdef(\x).enSet(\octave,3)
::

This will include on enSet instruction for the octave parameter.

code::
NNdef(\x).asCode
::
