CLASS:: EventSource
summary:: Implementation of Functional Reactive Programming.
categories:: FP
related:: Classes/FPSignal

description::

This is a port of the reactive-core library for Scala into SuperCollider.

For more info see:

http://www.reactive-web.co.cc/core/EventStream

The combinators interface is essentialy a copy of reactive-banana Haskell library.

SUBSECTION::Type Classes

EventSource is an instance of the Functor and Monoid Type Classes.

CLASSMETHODS::

PRIVATE:: new, newNoLog


method::zero
returns:: EventStream[A]
discussion::
Zero of Monoid Type Class. Returns an event source that never fires.

instancemethods::

PRIVATE:: addListener, initEventSource, listeners, proc, removeListener, prEnGeneric, initNoLog, prEnGenericUni, prMakeStorableES,  storeWithT, storePreviousWithT, switchSig, switchSig2, takeWhile, |


SUBSECTION::Combinators

Methods to combine EventSource's into a network of event processing nodes.
These combinators should be used inside an ENdef or NNdef.

method::hold
argument::initialValue
The current ('now') value for the returned FPSignal.
returns:: An FPSignal that holds the last value of the EventSource

method::collect
returns::A new EventStream, that for every event that this EventStream fires, that one will fire an event that is the result of applying 'f' to this EventStream's event.
discussion::

code::
//Create a slider:
w = Slider().front;


(
ENdef(\x).clear;
ENdef(\x, {
	w.enIn
	.collect( _*100 )
	.enDebug("val");
}).start
)
::

method::select
returns::A new EventStream that propagates a subset of the events that this EventStream fires.
discussion::
code::

(
ENdef(\x).clear;
ENdef(\x, {
	w.enIn
	.select( _ < 0.5 )
	.enDebug("val");
}).start
)

::

method::inject
argument::initial
initialValue
argument::f
state altering function
returns:: A new EventStream that, for every event t fired by the original EventStream, fires the result of the application of f (which will also be the next value of u passed to it). Often 'u' will be an object representing some accumulated state.
discussion::

Allows one, in a functional manner, to respond to an event while taking into account past events. For every event t, f is called with arguments (u, t), where u is initially the value of the 'initial' parameter, and subsequently the result of the previous application of f.

code::
w = Slider().front;

//get current and last value
(
ENdef(\x).clear;
ENdef(\x, {
	w.enIn
	.inject( [0,0], {|state, newValue| [state[1], newValue] })
	.enDebug("val");
}).start
)

//sum 1
(
ENdef(\x).clear;
ENdef(\x, {
	w.enIn
	.inject( 0, {|state, newValue| state + 1 })
	.enDebug("val");
}).start
)
::

method::injectSig
argument::initial
initialValue
argument::f
state altering function
returns:: A new EventStream that, for every event t fired by the original EventStream, fires the result of the application of f (which will also be the next value of u passed to it). Often 'u' will be an object representing some accumulated state.
discussion::

Creates a signal initialized with the initial state.

method::injectF
argument:: initial
initial value
returns:: A new EventStream that, for every event f fired by the original EventStream, fires the result of the application of f to the current state s.

code::
(
a = Button().states_([["+"]]);
b = Button().states_([["-"]]);
w = Window().layout_(HLayout(a,b)).front;
)

//sum and subtract
(
ENdef(\x).clear;
ENdef(\x, {
	var aES = a.enIn.collect{{|x| x+1 }};
	var bES = b.enIn.collect{{|x| x-1 }};
	(aES |+| bES).injectF(0)
	.enDebug("val");
}).start
)
::

method::injectFSig
argument:: initial
initial value
returns:: A new EventStream that, for every event f fired by the original EventStream, fires the result of the application of f to the current state s. Creates a signal initialized with the initial state.

code::
(
a = Button().states_([["+"]]);
b = Button().states_([["-"]]);
c = Slider();
w = Window().layout_(HLayout(a,b,c)).front;
)

//sum and subtract
(
ENdef(\x).clear;
ENdef(\x, {
	var aES = a.enIn.collect{{|x| x+1 }};
	var bES = b.enIn.collect{{|x| x-1 }};
	var stateSig = (aES |+| bES).injectFSig(0)
	.enDebug("counter");
	stateSig.sampleOn(c.enIn)
	.enDebug("sampled");
}).start
)
::

method::|+|
Merges the output of the two EventSources.
discussion::
code::
(
a = Slider();
b = Slider();
w = Window().layout_(HLayout(a,b)).front;
)
//get events from a or b
(
ENdef(\x).clear;
ENdef(\x, {
	var aES = a.enIn;
	var bES = b.enIn;
	(aES |+| bES)
	.enDebug("val");
}).start
)
::

method::merge
the same as code::|+|::

method:: switchTo
Create a new EventStream that consists of the events of the EventStreams returned by f. f is applied on every event of the original EventStream, and its returned EventStream is used until the next event fired by the original EventStream, at which time the previously returned EventStream is no longer used and a new one is used instead.

argument::f
f the function that is applied for every event to produce the next segment of the resulting EventStream.
argument::initES
the initial EventStream to use.
discussion::
code::

(
a = Button().states_([["a"],["b"]]);
b = Slider();
c = Slider();
w = Window().layout_(HLayout(a,b,c)).front;
)
//upon pressing the button alternates between letting through events only from b or only from c
(
ENdef(\x).clear;
ENdef(\x, {
	var bES = b.enIn;
	var cES = c.enIn;
	a.enIn.switchTo({ |x|
		x.postln;
		if(x == 0){
			bES
		}{
			cES
		}
	}, bES)
	.enDebug("val");
}).start
)
::

SUBSECTION::Persistable nodes

method::holdStore

method::injectFSigStore

method::injectFStore

SUBSECTION::Utilities

method::expexp

method::explin

method::linexp

method::linlin

method::lincurve

method::curvelin

method::nexp

method::nlin

method::storePrevious

method::selectSome

method::paged

method::mapWith
Map value with spec

method::onlyChanges
Block values which are equal to the last value.

SUBSECTION::Event Network - Monadic interface

method::reactimate
returns:: nil

discussion::

This EventStream should carry values of class IO with actions to be performed. This method should be called when defining an EventNetwork with the monadic interface.

method::debug

SUBSECTION::Event Network - Imperative interface

method::enOut
This EventStream should carry values of class IO with actions to be performed. This method should be called when defining an EventNetwork with the monadic interface.

method::enDebug
Post incoming values to the post window with label.

SUBSECTION::NNdef

method::enKr

method::enKrUni

method::enAr

method::enArUni

method::enTr


SUBSECTION::Perform Side-Effects

When doing proper FRP (i.e. using ENdef or NNdef) these methods should not be used.

METHOD:: fire

Emit an event to all registered listeners.
This will send an event into the event processing network.

method::do
Run f every time a new event arrives.
argument::f
 A function
returns:: Unit

code::
(
x = EventSource();
f = { |x| postln("look what I got:"++x) };
x.do(f);
x.fire(3)
)


//stop the action
(
x.stopDoing(f);
x.fire(4)
)

::

method::stopDoing

Stop running function f.
argument::f
A function
returns:: Unit

method::doDef

Run f every time a new event arrives and save the function using the name given

argument::name
A key
argument::f
The function to call
returns:: Unit

code::
(
x = EventSource();
x.doDef(\hello,{ |x| postln("look what I got:"++x) });
x.fire(3)
)
(
x.doDef(\hello,{ |x| postln("And now I print it like this:"++x) });
x.fire(3)
)
(
//remove the action
x.doDef(\hello);
x.fire(3)
)
::

method::remove

Disconnects this EventStream from the parent EventStream (if it has a parent). If the EventStream is not assigned to any variable anymore it will be gc'ed.

code::
(
x = EventSource();
y = x.collect(_+10);
y.do(postln(_));
x.fire(2);
)

(
y.remove;
x.fire(3);
//nothing is posted
)

//now the EventSource that was assigned to y can be gc'ed.
y = nil;
::

method::reset

Removes all listeners. This will disconnect this EventSource from the rest of the chain that depends on it, and the rest of the chain will be gc'ed.

code::
(
x = EventSource();
y = x.collect(_+10).do(postln(_));
y = x.collect(_+100).do(postln(_));
x.fire(2);
)

(
x.reset;
x.fire(3);
//nothing is posted
)
::


