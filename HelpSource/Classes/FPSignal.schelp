CLASS:: FPSignal
summary:: Implementation of Functional Reactive Programming.
categories:: FP, TimerES
related:: Classes/EventSource

description::

This is port of the reactive-core library for Scala into SuperCollider.

For more info see:

http://www.reactive-web.co.cc/core/Signal

The combinators interface is essentialy a copy of reactive-banana Haskell library.

SUBSECTION::Type Classes
EventSource is an instance of the Functor and Applicative Functor Type Classes.

CLASSMETHODS::

PRIVATE:: new

instancemethods::

PRIVATE::initFPSignal, now

SUBSECTION::Combinators


method::changes
An EventSource which fires events every time the signal changes.

code::
(
x = Var(2);
x.changes;
)
::

method::collect
argument::f
f: A => B
discussion::
code::
(
x = Var(2);
y = x.collect( _*100 );
y.do(_.postln);
)

x.value_(100)
::

method::switchTo
argument::f
f: A => FPSignal[B]
discussion::

Implementes event switching.

code::
(
x = Var(1);
y = Var(2);
z = x.switchTo{ |x| y.collect{ |y| [x,y] } };
z.do(_.postln);
)

x.value_(5);
y.value_(6);
::

method::inject
Allows one, in a functional manner, to respond to an event while taking into account past events. For every event t, f is called with arguments (u, t), where u is initially the value of the 'initial' parameter, and subsequently the result of the previous application of f.
returns:: A new FPSignal that, for every event t fired by the original FPSignal, fires the result of the application of f (which will also be the next value of u passed to it). Often 'u' will be an object representing some accumulated state.
discussion::
An FPSignal that sums all the integer values fired by the parent FPSignal.
code::
(
x = Var(1.0);
y = x.inject( 0, {|state,b| state + b });
y.do(_.postln);
x.value_(1);
x.value_(4);
x.value_(7)
)
::

method::selfSwitch
switching based on the the signal itself
argument:: f
function A -> FPSignal[ T(A, Option[B]) ]
returns:: FPSignal[A]
discussion::

Given an initial signal sigA of type FPSignal[ T(A, Option[B]) ], calling selfSwitch on it with a function f that evaluates to another signal sigB of type FPSignal[ T(A, Option[B]) ] will behave like sigA while the value of sigA is T(x, None()). When a value of type T(x,Some(v)) is received the function f is evaluated with v and sigA is switched out, sigB is switched in taking the role of sigA and repeating the procedure ad infinitum. This is a sort of recursive switching.

If this was a function it would have type

FPSignal[ T(A, Option[B]) ] -> ( A -> FPSignal[ T(A, Option[B]) ] ) -> FPSignal[A]

note::
If the initial signal can be generated from f given an initial value code::initVal:: then we can use for convenience

code::
f.selfSwitch(initVal)
::

which is equivalent to

code::
f.(initVal).selfSwitch(f)
::
::

code::
//resets a counter
(
var timer = ENTimer(0.1);
x = EventNetwork(ENImperEval{

	var tSig = timer.enIn.hold(0.0);

	var f = { Var(1.0).integral(tSig).collect{ |x|
		if(x > 5){ T(x,Some(Unit)) }{ T(x,None() ) }
	} };

	var x = f.().selfSwitch(f);

	x.enDebug("x: ");

},true);

x.start;
timer.start.unsafePerformIO
)

//bouncing ball
(
var timer = ENTimer(0.1);
x = EventNetwork(ENImperEval{

	var tSig = timer.enIn.hold(0.0);

	var ball = { |y0,v0|
		var ss  = [y0,v0].postln;
		var v = Var(-9.8).integral(tSig).collect(_+v0);
		var y = v.integral(tSig).collect(_+y0);

		T(_,_).lift.(y,v).collect{ |tup|
			if(tup.at1 < 0){ T(tup.at1,Some(tup)) }{ T(tup.at1,None() ) }
		}
	};

	var fall = ball.(10,0).selfSwitch({ |tup| ball.(0, tup.at2.neg) });

	fall.enDebug("y: ");

},true);

x.start;
timer.start.unsafePerformIO
)
::

method::<*>
Applicative functor. Apply a time-varying function to time-varying value.

code::
(
a = Slider();
b = Slider();
w = Window().layout_(HLayout(a,b)).front;
)

(
ENdef(\x).clear;
ENdef(\x, {
	//first slider as signal
	var aES = a.enInSig;
	var bES = b.enIn;
	(aES |+| bES)
	.enDebug("val");
}).start
)

method::<@>
Apply a time varying function to incoming events



code::
(
var x = Var({ |x| x + 25 });
var z = EventSource();
var r = x <@> z;
r.do( _.postln );
z.fire(2);
x.value_({ |x| x + 28 });
z.fire(2);
)


(
var x = Var(1.0);
var y = Var(2.0);
var z = EventSource();
var r = { |x,y,z| x + y +z } <%> x <*> y <@> z;
r.do( _.postln );
x.value_(20);
y.value_(40);
z.fire(2)
)
::

method::when
argument:: es
EventStream[A]
returns:: EventStream[A]
discussion::

When an event arrives from es, if this signal contains the true value then the event goes through.

method::if
argument:: trueES
EventStream[A]
argument:: falseES
EventStream[A]
returns:: EventStream[A]
discussion::

If the current value of this signal is true then events from trueES pass through, otherwise events from falseES pass trough.

SUBSECTION::Utilities

method::expexp

method::explin

method::linexp

method::linlin

method::lincurve

method::curvelin

method::nexp

method::nlin

method::storePrevious

method::mapWith
Map value with spec

SUBSECTION::Event Network - Monadic interface

method::reactimate
returns:: nil

discussion::

This FPSignal should carry values of class IO with actions to be performed. This method should be called when defining an EventNetwork with the monadic interface.

method::debug

SUBSECTION::Event Network - Imperative interface

method::enOut
This FPSignal should carry values of class IO with actions to be performed. This method should be called when defining an EventNetwork with the monadic interface. The action which is the current value of the FPSignal will be executed when the network is compiled. This usefull for initialization.

method::enDebug
Post incoming values to the post window with label.

SUBSECTION::NNdef

method::enKr

method::enKrUni

method::enAr

method::enArUni


SUBSECTION::Perform Side-Effects

Usually FPSignal child classes should be used inside an ENdef or NNdef. Nevertheless it is possible to add call-backs directly, although this is not recommended:

method::do
When the Signal changes, runs f with new value.

code::
(
x = Var(0);
f = { |x| postln("look what I got:"++x) };
x.do(f);
x.value_(3)
)

//stop the action
(
x.stopDoing(f);
x.value_(4)
)
::

method::doDef

Run f every time a new event arrives and save the function using the name given

argument::name
A key
argument::f
The function to call
returns:: Unit

code::
(
x = Var(0);
x.doDef(\hello,{ |x| postln("look what I got:"++x) });
x.value_(3)
)
(
x.doDef(\hello,{ |x| postln("And now I print it like this:"++x) });
x.value_(3)
)
(
//remove the action
x.doDef(\hello);
x.value_(3)
)
::

method::stopDoing

Stop running function f.
argument::f
A function
returns:: Unit

SUBSECTION::Disconnect from network

Usually FPSignal child classes should be used inside an ENdef or NNdef. It is possible to manipulate the FRP graph directly, although this is not recommended:


method::remove

Disconnects this FPSignal from the parent FPSignal (if it has a parent). If the FPSignal is not assigned to any variable anymore it will be gc'ed.

code::
(
x = Var(1.0);
y = x.collect(_+10);
y.do(postln(_));
x.value_(2);
)

(
y.remove;
x.value_(3);
//nothing is posted
)

//now the EventSource that was assigned to y can be gc'ed.
y = nil;
::

method::reset

Removes all listeners. This will disconnect this EventSource from the rest of the chain that depends on it, and the rest of the chain will be gc'ed.

code::
(
x = Var(1.0);
x.collect(_+10).do(postln(_));
x.collect(_+100).do(postln(_));
x.value_(2);
)

(
x.reset;
x.value_(3);
//nothing is posted
)
::
