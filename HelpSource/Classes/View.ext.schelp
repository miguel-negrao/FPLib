Needs update.

INSTANCEMETHODS::

subsection:: Extensions by FPLib

method::mouseClicksENInputES
event stream of mouse clicks (on mouse ups).
returns:: Writer[EventSource[Unit], A]

method::mouseClicksEnInES
ENImperEval version of mouseClicksENInputES
returns:: EventSource[Unit]

method::mousePosENInput
FPSignal with mouse position
returns:: Writer[FPSignal[Point(Int,Int)], A]
discussion::
note::
Must call code::.acceptsMouseOver_(true):: on the view.
::

method::mousePosEnIn
ENImperEval version of mousePosENInput
returns:: FPSignal[Point(Int,Int)]
discussion::

code::
//mouse position
(
w = Window().acceptsMouseOver_(true).front;

x = EventNetwork(ENImperEval({
	var pos = w.view.mousePosEnIn;
	pos.collect{ |p| putStrLn("mouse pos is: "++p) }.enOut;
}));

x.start
)
::

code::
//track mouse position
(
w = UserView().minWidth_(500).minHeight_(500).acceptsMouseOver_(true).front;

x = EventNetwork(ENImperEval({
	var pos = w.mousePosEnIn;

	var cx = w.bounds.width/2;
	var cy = w.bounds.height/2;
	var c = Point(cx,cy);

	var drawing = pos.collect{ |p|
		var points = [Point(-50, 0),Point(0, 25),Point(0,-25)].collect{ |x|
			x.rotate( (c-p).angle ) + c
		};
		var shape1 = PenStepShape.polygon(points);
		var shape2 = PenWedge(p,10,0,2*pi);
		PenDrawing( [ PenDrawedShapes([shape1], \fill, Color.blue, Color.red),
			PenDrawedShapes([shape2], \fill, Color.green, Color.red)
		] )
	};

	drawing.collect(w.setDrawing(_)).enOut
}));

x.start
)
::

code::
//stamp circles
(
w = UserView().minWidth_(500).minHeight_(500).acceptsMouseOver_(true).front;

x = EventNetwork(ENImperEval({
	var pos = w.mousePosEnIn;
	var clicks = w.mouseClicksEnInES;

	var accumPos = pos.sampleOn(clicks).inject([], { |state,x| state.addI(T(x,Color.rand)) });

	accumPos.collect{ |positions|
		 var drawings = positions.collect{ |tup|
			PenDrawedShapes([PenWedge(tup.at1,10,0,2*pi)], \fill, tup.at2, Color.red)
		};
		var final = PenDrawing( drawings );
		w.setDrawing(final)
	}.enOut

}));

x.start
)
::


method::mouseIsDownENInput
FPSignal with boolean indicating if left button is down
returns:: Writer[FPSignal[Bool], A]

method::mouseIsDownEnIn
ENImperEval version of mouseIsDownENInput
returns:: FPSignal[Bool]
discussion::
code::
// is down
(
t = StaticText();
w = Window().layout_(HLayout(t)).front;

x = EventNetwork(ENImperEval({
	var pos = w.view.mouseIsDownEnIn;
	pos.collect{ |b| IO{ t.string_("mouse is down: "++b) } }.enOut;
}));

x.start
)
::



method::keyDownENInputES
Event source with latest typed key on keyboard.
returns:: Writer[EventSource[Char], A]

method::keyDownEnInES
ENImperEval version of keyDownENInputES
returns:: EventSource[Char]
discussion::
code::
//keyDown
(
t = StaticText();
w = Window().layout_(HLayout(t)).front;

x = EventNetwork(ENImperEval({
	var pos = w.view.keyDownEnInES;
	pos.collect{ |b| IO{ t.string_("key down: "++b) } }.enOut;
}));

x.start
)
::



method::keysDownENInput
FPSignal with list of currently pressed keys.
returns:: Writer[FPSignal[[Char]], A]

method::keysDownEnIn
ENImperEval version of keysDownENInput
returns:: FPSignal[[Char]]
discussion::
code::
//keysDown
(
t = StaticText();
w = Window().layout_(HLayout(t)).front;

x = EventNetwork(ENImperEval({
	var pos = w.view.keysDownEnIn;
	pos.collect{ |b| IO{ t.string_("keys down: "++b) } }.enOut;
}));

x.start
)
::