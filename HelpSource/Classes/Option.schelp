CLASS:: Option
summary:: Represents optional values.
categories:: FP
related:: Classes/Some, Classes/None()

DESCRIPTION::
In programming languages (especially functional programming languages) an option type is a polymorphic type that represents encapsulation of an optional value; e.g. it is used as the return type of functions which may or may not return a meaningful value when they're applied. It consists of either an empty constructor (called None()), or a constructor encapsulating the original data type A (written Some A).

It allows to build up calculations based on values that can be valid or not, without having to test the value until the very end of the calculation. Most often Option avoids the use of nil checks, i.e. statements like if(x.notNil) { foo.bar(x) }.

This class is copied from the Scala Option class.

For more information see http://en.wikipedia.org/wiki/Option_type.

Is a type instance of Functor, Applicative Functor, Monad

nil checks can be converted to Option checks by doing code:: myObject.asOption ::. This will convert nil values to None() and all other values to Some. This is different from using pure, because code::nil.pure(Option):: will output a code::Some(nil):: not a code::None()::.

CLASSMETHODS::

METHOD:: new
argument:: x
returns:: Some(x)

METHOD:: empty
returns:: None()

EXAMPLES::

code::
//.get should never be used... it defeats the purpose of using option.

None().collect(_*4)
Some(2).collect(_*4)

None().isEmpty //true
Some(2).isEmpty //false

[Some(2),None(),Some(4)].collect( _.select({ |x| x > 3 }) ) // -> return [ None(), None(), Some(4) ]
::

With arrays:

code::
[Some(2),None(),Some(4)].flatten // -> return [2,4]
[Some(Point(1,2)),None(),Some(Point(3,4))].collect( _.collect( _.x) ).flatten // -> return [1,3]
::

Dictionary.get returns None() if the key doesn't exist and Some(x) if they key has value x.

code::
(\freq:400, \amp: 1).get(\freqMod).collect(_*3)
(\freq:400, \amp: 1).get(\freq).collect(_*3)

(\freq:400, \amp: 1).get(\freqMod).do({|x| postln("result: "++x) }) //nothing happens
(\freq:400, \amp: 1).get(\freq).do({|x| postln("result: "++x) })  //executes function


(\freq:400, \amp: 1).get(\freqMod).getOrElse(1500) // return 1500
(\freq:400, \amp: 1).get(\freq).getOrElse(1500)    // return 400

(\freq:400, \amp: 1).get(\freqMod).orElse(1500) //return 1500
(\freq:400, \amp: 1).get(\freq).orElse(1500)    //return Some(400)
::

Access a 3 level dictionary hierarchy without ever using any if statement:
code::
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\dic1) >>= (_.get(\dic2)) >>= (_.get(\thing)).getOrElse(500)  // -> return 3
)
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\bogus) >>= (_.get(\dic2)) >>= (_.get(\thing)).getOrElse(500) // -> return 500
)
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\dic1) >>= (_.get(\bogus)) >>= (_.get(\thing)).getOrElse(500) // -> return 500
)
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\dic1) >>= (_.get(\dic2)) >>= (_.get(\bogus)).getOrElse(500)  // -> return 500
)

(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\dic1) >>= (_.get(\dic2)) >>= (_.get(\thing)).do(postln(_))  // -> print 3
)
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\bogus) >>= (_.get(\dic2)) >>= (_.get(\thing)).do(postln(_)) // -> do nothing
)
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\dic1) >>= (_.get(\bogus)) >>= (_.get(\thing)).do(postln(_)) // -> do nothing
)
(
x = (\dic1:(\dic2:(\thing: 3)), \amp: 1);
x.get(\dic1) >>= (_.get(\dic2)) >>= (_.get(\bogus)).do(postln(_))  // -> do nothing
)
::
